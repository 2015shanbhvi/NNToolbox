% x = HoursSlept; %1x16 double of hours slept
% t = ExamScores; %1x16 double of exam scores
% 
% net = fitnet(10, 'trainlm'); %create a neural network with hidden layer of size 10
% %also, train it with Levenberg-Marquardt
% 
% %dividing up the data
% net.divideParam.trainRatio = 8/16;
% net.divideParam.valRation = 4/16;
% net.divideParam.testRation = 4/16;
% 
% 
% 
% [net,tr] = train(net,x,t); %train with training data
% 
% %Test the network
% outputs = net(inputs);
% errors = gsubtract(targets, outputs);
% performance = perform(net,targets, outputs);
% 
% 
% view(net); %view the trained network
% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 21-May-2016 10:22:02
%
% This script assumes these variables are defined:
%
%   houseInputs - input data.
%   houseTargets - target data.

x = HoursSlept;
t = ExamScores;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in xlow memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 1;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 8/16;
net.divideParam.valRatio = 4/16;
net.divideParam.testRatio = 4/16;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

